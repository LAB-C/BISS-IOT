* inputFormatter

대부분 web3-core-helpers/formatters.js 에서 가져다 쓴다.

특이 케이스
1) 뭔 생각으로 얘는 formatters에 안 넣고 이런 식으로 짰을까. (급했었나)
caver-klay-accounts 쪽.
```
inputFormatter: [function (address) {
    if (utils.isAddress(address)) {
        return address;
    } else {
        throw new Error('Address '+ address +' is not a valid address to get the "transactionCount".');
    }
}, function () { return 'latest'; }]
```

2) 다 formatters로 갖다쓰다가 갑자기, caver-klay 에서 이상한 짓을 함.
```
var formatter = helpers.formatters;
```
로 선언해서 formatter.xxx 이런 식으로 씀. 왜 여기서만 formatters로 통일안했는지 이해가 안된다.

* outputFormatter

대부분 web3-core-helpers/formatters.js 에서 가져다 쓴다. (inputFormatter와 동일)

특이 케이스
1) utils에서 딱 두개 가져다 쓴다. (그냥 이거도 formatters로 옮기는게 통일성 유지에 좋을듯하다.)
utils.hexToNumber
utils.toChecksumAddress

2) caver-klay-contract에서는 instance의 메서드를 bind해서 사용함.
_this.decodeEventABI.bind(subOptions.event)

```
var getPastLogs = new Method({
    name: 'getPastLogs',
    call: 'klay_getLogs',
    params: 1,
    inputFormatter: [formatters.inputLogFormatter],
    outputFormatter: this._decodeEventABI.bind(subOptions.event)
});
```
왜 갑자기 여기서는 새로 정의해서 쓴걸까. 이것도 formatters로 옮겨버리자.

* 결론
1) inputFormatters
  - `caver-klay` 쪽의 formatter -> formatters로 변경하자.
  - `caver-klay-accounts` 쪽의 inputFormatter 직접 정의한 함수 formatters 코드에 넣어주자.
2) outputFormatters
  - utils.hexToNumber, utils.toChecksumAddress 이거 그냥 formatters에도 넣어주자.
  - `caver-klay-contract`에서 _this.decodeEventABI.bind(subOptions.event) 이렇게 쓰는거 formatters에서 정의해버리자.

=> 이렇게 되면 inputFormatters, outputFormatters 모두 다 formatters에서 가져오면 되고,
cli를 통해 rpc json 정의할 때, formatters 파일만 뒤지면 되기 때문에 간편해짐.

* transformPayload

Method instance 만들 때, transformPayload 지정해주는 애가 있는데, 이거 굳이 써야되나?
안 써도 될 것 같음. 사용예 보니까 caver-klay의 klay_sign에서 딱 한 번 쓴다. 이거(transformPayload) 그냥 없애버리고
formatters에 넣어버리자.

사용되는 곳)
klay_sign의
transformPayload: function (payload) {
    payload.params.reverse();
    return payload;
}

그냥 payload받은거 params를 reverse() 한번 돌려주는건데 이걸 굳이 여기서 돌려줘야하나? 아닐거같은데

@todo klay_sign 케이스만 잘 처리하면 transformPayload도 안써줘도 될 듯.

* extraFormatters

사용되는 곳 유일하게 한 군데. - caver-klay-contract의 _executeMethod 에서 사용됨.
(아니 얘네들 왜 딱 한 군데에 쓰이는거를 자꾸 굳이 만들어서 귀찮게 해놨지. 넘 specific한 옵션들이 많음.
이런거 다 정리할 수 있을 듯.)

이거는 진짜 extraFormatters라고 따로 만들게 아니라 그냥 아예 코드째로 klay_sendTransaction에 로직을 넣는게 맞음.

web3-core-method (사용되는 곳)

_confirmTransaction -> checkConfirmation 에서 딱 한 번 사용됨.

// apply extra formatters
if (method.extraFormatters && method.extraFormatters.receiptFormatter) {
    receipt = method.extraFormatters.receiptFormatter(receipt);
}

// if contract, return instance instead of receipt
if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {
    defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));
} else {
    defer.resolve(receipt);
}

caver-klay-contract (정의된 곳)
// make sure receipt logs are decoded
var extraFormatters = {
    receiptFormatter: function (receipt) {
        if (_.isArray(receipt.logs)) {

            // decode logs
            var events = _.map(receipt.logs, function(log) {
                return _this._parent._decodeEventABI.call({
                    name: 'ALLEVENTS',
                    jsonInterface: _this._parent.options.jsonInterface
                }, log);
            });

            // make log names keys
            receipt.events = {};
            var count = 0;
            events.forEach(function (ev) {
                if (ev.event) {
                    // if > 1 of the same event, don't overwrite any existing events
                    if (receipt.events[ev.event]) {
                        if (Array.isArray(receipt.events[ ev.event ])) {
                            receipt.events[ ev.event ].push(ev);
                        } else {
                            receipt.events[ev.event] = [receipt.events[ev.event], ev];
                        }
                    } else {
                        receipt.events[ ev.event ] = ev;
                    }
                } else {
                    receipt.events[count] = ev;
                    count++;
                }
            });

            delete receipt.logs;
        }
        return receipt;
    },
    contractDeployFormatter: function (receipt) {
        var newContract = _this._parent.clone();
        newContract.options.address = receipt.contractAddress;
        return newContract;
    }
};

var sendTransaction = (new Method({
    name: 'sendTransaction',
    call: 'klay_sendTransaction',
    params: 1,
    inputFormatter: [formatters.inputTransactionFormatter],
    requestManager: _this._parent._requestManager,
    accounts: _this.constructor._klayAccounts || _this._klayAccounts, // is klay.accounts (necessary for wallet signing)
    defaultAccount: _this._parent.defaultAccount,
    defaultBlock: _this._parent.defaultBlock,
    extraFormatters: extraFormatters
})).createFunction();
